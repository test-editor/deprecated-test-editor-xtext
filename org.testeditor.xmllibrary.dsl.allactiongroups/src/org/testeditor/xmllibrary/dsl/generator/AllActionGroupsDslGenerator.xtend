/*
 * generated by Xtext
 */
package org.testeditor.xmllibrary.dsl.generator

import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.testeditor.xmllibrary.model.Action
import org.testeditor.xmllibrary.model.ActionGroup
import org.testeditor.xmllibrary.model.ActionGroups
import org.testeditor.xmllibrary.model.ActionName
import org.testeditor.xmllibrary.model.Argument

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AllActionGroupsDslGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val container = resource.contents.head as ActionGroups
		val sourceFilename = resource.URI.trimFragment.trimFileExtension.lastSegment
		val filename = '''«sourceFilename».xml'''.toString
		fsa.generateFile(filename, compile(container, URI.createURI(filename)))
	}

	def String compile(ActionGroups container, URI uri) {
		val result = '''
			<?xml version="1.0" encoding="UTF-8"?>
			<ActionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" schemaVersion="1.1">
			
				«container.actionGroups.map[compile].join("\n\n")»
			
			</ActionGroups>
		'''

		return result
	}

	protected def String compile(ActionGroup actionGroup) '''
		<ActionGroup name="«actionGroup.name»">
			«actionGroup.actions.map[compile].join»
		</ActionGroup>
	'''

	protected def String compile(Action action) {
		if (action.actionNames.empty) {
			return action.createActionWithoutName
		} else {
			return action.actionNames.map[actionName | action.createAction(actionName)].join	
		}
	}
	
	protected def String createActionWithoutName(Action action) '''
		<action technicalBindingType="«action.technicalBindingType.id»" />
	'''
	protected def String createAction(Action action, ActionName actionName) '''
		<action technicalBindingType="«action.technicalBindingType.id»">
			<actionName locator="«actionName.locator»">«actionName.name»</actionName>
			«IF actionName.argument !== null»«actionName.argument.compile»«ENDIF»
		</action>
	'''

	protected def String compile(Argument argument) '''
		<argument id="«argument.actionPart?.id»">
			«argument.values.map[compileValue].join("\n")»
		</argument>
	'''
	
	protected def String compileValue(String value) {
		return '''<value>«value»</value>'''		
	}

}
