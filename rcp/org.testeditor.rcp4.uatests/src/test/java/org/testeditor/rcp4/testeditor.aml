package org.testeditor.rcp4

import org.testeditor.fixture.swt.*

interaction type createSimpleProject {
	label = "Create simple project"
	template = "Create simple project"
	method = TestEditorFixture.createDemoProject
}

interaction type cleanWorkspace {
	label = "Clean Workspace content"
	template = "Clean Workspace"
	method = TestEditorFixture.cleanWorkspace
}

interaction type restartApp {
	label = "Clean restart Test-Editor"
	template = "Reset UI State"
	method = TestEditorFixture.resetApplication
}

component type TestEditorApp {
	interactions = createSimpleProject, restartApp, cleanWorkspace
}

component HauptFenster is General {
	element ProjektBaum is View {
		label = "Project Explorer"
		locator ="Test Project Explorer"
	}
	element TestStepSelector is View {
		label = "Test Step Selector"
		locator = "Test Step Selector"
	}
}

value-space projectmenues = #[ "New/Project...", "Open" ]

component ProjectExplorer is General {
	element ProjektBaum is TreeView { // TODO english!
		label = "Project Explorer"
		locator = "Test Project Explorer"
		executeContextMenuEntry.item restrict to projectmenues 
	}
}

component TestEditor is TestEditorApp {
}

component NewDialog is Dialog {
	element ProjectType is Tree {
		label = "Project Type Tree"
		locator = "[Single]"
	}
	element NextButton is Button {
		label = "Next Button"
		locator = "[Label]&Next >"
	}
	element FinishButton is Button {
		label = "Finish Button"
		locator = "[Label]&Finish"
	}
	element ProjectName is Text {
		label = "Project Name"
		locator = "[Single]"
	}
	element AddFixtureButton is Button {
		label = "Add Fixture Button"
		locator = "[ID]NEW_DIALOG_ADD_SELECTED_FIXTURE"
	}
	element AvailableFixturesList is List {
		label = "Available fixtures list"
		locator = "[ID]NEW_DIALOG_AVAILABLE_FIXTURE_LIST"
	}
	
	element GenerateWithExamples is CheckBox {
		locator = "NEW_DIALOG_GENERATE_WITH_EXAMPLES"
	}

}
