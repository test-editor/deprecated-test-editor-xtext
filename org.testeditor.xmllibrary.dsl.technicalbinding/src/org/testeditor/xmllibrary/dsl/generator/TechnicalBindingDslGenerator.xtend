/*
 * generated by Xtext
 */
package org.testeditor.xmllibrary.dsl.generator

import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl
import org.eclipse.emf.ecore.xmi.util.XMLProcessor
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.testeditor.xmllibrary.model.ActionType
import org.testeditor.xmllibrary.model.TechnicalBindingTypes

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TechnicalBindingDslGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val container = resource.contents.head as TechnicalBindingTypes
		
		for (technicalBinding : container.types) {
			technicalBinding.actionParts.forEach[ part, i |
				part.position = i + 100
				if (part.type === null) {
					part.type = ActionType.TEXT
				}
			]
		}
		
		val sourceFilename = resource.URI.trimFragment.trimFileExtension.lastSegment
		val filename = '''«sourceFilename».xml'''.toString
		fsa.generateFile(filename, compile(container, URI.createURI(filename)))
	}
	
	def String compile(EObject eObject, URI uri) {
		val resource = new XMLResourceImpl(uri) => [
			encoding = "UTF-8"
			contents += eObject
		]
		val processor = new XMLProcessor
		return processor.saveToString(resource, null)
	}
	
}
