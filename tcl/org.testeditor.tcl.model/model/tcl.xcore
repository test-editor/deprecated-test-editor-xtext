/*******************************************************************************
 * Copyright (c) 2012 - 2015 Signal Iduna Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Signal Iduna Corporation - initial API and implementation
 * akquinet AG
 * itemis AG
 *******************************************************************************/
@Ecore(nsURI="http://www.testeditor.org/tcl")
@GenModel(
	modelDirectory="org.testeditor.tcl.model/src-gen", 
	complianceLevel="7.0"
)
package org.testeditor.tcl

import org.eclipse.xtext.xtype.XImportSection
import org.testeditor.tsl.SpecificationStep
import org.testeditor.tsl.TestSpecification
import org.testeditor.aml.VariableReference
import org.testeditor.aml.Template
import org.testeditor.aml.Component
import org.testeditor.aml.VariableReference
import org.testeditor.tsl.StepContent
import org.testeditor.tsl.StepContentValue

class TclModel {
	String ^package
	contains XImportSection importSection
	contains EnvironmentVariableReference[0..*] environmentVariableReferences
	contains TestCase test opposite model
	contains MacroCollection macroCollection opposite model
}

class TestCase {
	String name
	container derived TclModel model opposite test
	refers TestSpecification specification
	contains SpecificationStepImplementation[0..*] steps opposite test
}

class SpecificationStepImplementation extends SpecificationStep {
	container derived TestCase test opposite steps
	contains TestStepContext[0..*] contexts
}

class EnvironmentVariableReference extends VariableReference {
}

class MacroCollection {
	String name
	container derived TclModel model opposite macroCollection
	contains Macro[0..*] macros
}

class Macro {
	String name
	contains Template template
	contains TestStepContext[0..*] contexts
}

abstract class TestStepContext {
}

class ComponentTestStepContext extends TestStepContext{
	refers Component component
	contains TestStep[0..*] steps
}

class MacroTestStepContext extends TestStepContext{
	refers MacroCollection macroCollection
	contains TestStep step
}

class TestStep {
	contains StepContent[0..*] contents
}

class AssertionTestStep extends TestStep {
	contains AssertionExpression expression
}

abstract class AssertionExpression {
}

class BinaryAssertionExpression extends AssertionExpression{
	contains AssertionExpression left
	contains AssertionExpression right
}

class AEComparison extends BinaryAssertionExpression {
	contains Comparator comparator
}

class AENullOrBoolCheck extends AssertionExpression {
	contains AEVariableReference varReference
	boolean negated = "false"
}

class AEVariableReference extends AssertionExpression {
	refers AssignmentVariable variable
	String key // only != null if: map.key
}

class AEStringConstant extends AssertionExpression {
	String string
}

class TestStepWithAssignment extends TestStep {
	contains AssignmentVariable variable opposite testStep
}

class AssignmentVariable extends VariableReference{
	container TestStepWithAssignment testStep opposite variable
}

class StepContentVariableReference extends StepContent{
	refers VariableReference variable
}

class StepContentElement extends StepContentValue {
}

class Comparator {
	boolean negated = "false"
}

class ComparatorEquals extends Comparator {
}

class ComparatorMatches extends Comparator {
}

class ComparatorLessThen extends Comparator {
}

class ComparatorGreaterThen extends Comparator {
}


