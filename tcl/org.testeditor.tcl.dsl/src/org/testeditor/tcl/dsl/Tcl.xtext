/*******************************************************************************
 * Copyright (c) 2012 - 2015 Signal Iduna Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Signal Iduna Corporation - initial API and implementation
 * akquinet AG
 * itemis AG
 *******************************************************************************/
grammar org.testeditor.tcl.dsl.Tcl with org.eclipse.xtext.xbase.Xbase

import "http://www.testeditor.org/tcl"
import "http://www.testeditor.org/tsl" as tsl
import "http://www.testeditor.org/aml" as aml
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

TclModel:
	'package' package=QualifiedName
	(importSection=XImportSection)?
	('require' environmentVariableReferences+=EnvironmentVariableReference
	      (',' environmentVariableReferences+=EnvironmentVariableReference)*)?
	(test=TestCase | macroCollection=MacroCollection)?;

TestCase:
	'#' name=ID
	('implements' specification=[tsl::TestSpecification|QualifiedName])?
	( // allow user to define setup and cleanup either at the beginning or end
		(setup=TestSetup)?
	 &  (cleanup=TestCleanup)?
	 &  steps+=SpecificationStepImplementation*
	);

TestSetup: 
	{TestSetup}
	'Setup' ':'
	contexts+=TestStepContext*
;

TestCleanup: 
	{TestCleanup}
	'Cleanup' ':'
	contexts+=TestStepContext*
;

SpecificationStepImplementation:
	{SpecificationStepImplementation}
	'*' contents+=StepContent* '.'?
	contexts+=TestStepContext*;

EnvironmentVariableReference:
	name=ID;

MacroCollection:
	'#' name=ID
	macros+=Macro+;

Macro:
	'##' name=ID
	'template' '=' template=Template
	contexts+=TestStepContext*
;

Template returns aml::Template:
	contents+=TemplateText (contents+=TemplateVariable contents+=TemplateText?)*	
;

TemplateText returns aml::TemplateText: 
	value=STRING
;

TemplateVariable returns aml::TemplateVariable: 
	name=TEMPLATE_VARIABLE_DEF
;

/* 
 * Using a separate terminal is required since we'd like to write ${element} and
 * this would otherwise be matched as the keyword 'element'.
 */
terminal TEMPLATE_VARIABLE_DEF:
	'${' ID? '}'
;

TestStepContext:
	(ComponentTestStepContext | MacroTestStepContext);

ComponentTestStepContext returns TestStepContext:
	{ComponentTestStepContext}
	('Mask' | 'Component') ':' component=[aml::Component|QualifiedName]
	steps+=(TestStep | TestStepWithAssignment | AssertionTestStep)*;

MacroTestStepContext returns TestStepContext:
	{MacroTestStepContext}
	'Macro' ':' macroCollection=[MacroCollection|QualifiedName]
	step=TestStep;

TestStep:
	{TestStep}
	'-' contents+=StepContent* '.'?;

AssertionTestStep:
	'-' 'assert' expression=AssertionExpression '.'?;

/** Assertion Exression is either a null check, 
 *  or a full comparison that requires a comparator and a right expression (in order to have no ambiguity with the null check), 
 *  or an inner expression in parenthesis (no more null checks allowed in here!) 
 */
AssertionExpression:
	AENullOrBoolCheck | AEFullComparison | '(' AssertionInnerExpression ')';

/** Assertion expression that does not allow null checks */
AssertionInnerExpression returns AssertionExpression:
	AEComparison |
	'(' AssertionInnerExpression ')';

AENullOrBoolCheck:
	(negated?='!')? variableReference=(VariableReference | VariableReferenceMapAccess);

/** expression order: AEComparison -> (AEAddition -> AEMultiplication ->) AEValue
 *  which is reflecting the order of operator binding.
 * 
 *  for binary expression: left is always referencing the rule with higher operator binding, 
 *  right is referencing the AEInnerExpression 
 */
AEFullComparison returns AEComparison:
	left=AEValue
	comparator=Comparator
	right=AssertionInnerExpression;

AEComparison:
	left=AEValue
	(comparator=Comparator
	right=AssertionInnerExpression)?;

VariableReference:
	variable=[aml::Variable];

VariableReferenceMapAccess:
	variable=[aml::Variable] '.' (key=ID | key=STRING);

AEStringConstant:
	string=STRING;

AEValue returns AssertionExpression:
	VariableReference | VariableReferenceMapAccess | AEStringConstant;

Comparator:
	ComparatorEquals |
	ComparatorMatches |
	ComparatorLessThen |
	ComparatorGreaterThen;

ComparatorEquals:
	{ComparatorEquals} ('=' | '==' | negated?='!=' | negated?='<>' | 'is' (negated?='not')?);

ComparatorMatches:
	{ComparatorMatches} ('matches' | negated?='does' 'not' 'match');

ComparatorLessThen:
	{ComparatorLessThen} ('<' | negated?='>=');

ComparatorGreaterThen:
	{ComparatorGreaterThen} ('>' | negated?='<=');

TestStepWithAssignment:
	'-' variable=AssignmentVariable '=' contents+=StepContent* '.'?;

AssignmentVariable:
	name=ID;
	
StepContent returns tsl::StepContent:
	StepContentText | StepContentElement | StepContentVariable | '@' VariableReference | '@' VariableReferenceMapAccess;

StepContentText returns tsl::StepContentText:
	value=ID | value=StepContentTextOperator;

/** hold all keywords that are allowed as step content text (to prevent parser to fail on keyword usage) */
StepContentTextOperator returns ecore::EString:
	'matches' | 'does' 'not' 'match' | 'is' 'not'? | 'template' | 'as' | 'Mask' | 'Component' | 'Macro' | 'implements' | 'package';

StepContentVariable returns tsl::StepContentVariable:
	value=STRING;

StepContentElement hidden():
	('<' value=ID '>') |
	{StepContentElement} ('<>' | '<' WS+ '>');
