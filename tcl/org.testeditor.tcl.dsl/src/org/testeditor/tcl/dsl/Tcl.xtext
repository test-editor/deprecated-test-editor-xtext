/*******************************************************************************
 * Copyright (c) 2012 - 2018 Signal Iduna Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Signal Iduna Corporation - initial API and implementation
 * akquinet AG
 * itemis AG
 *******************************************************************************/
grammar org.testeditor.tcl.dsl.Tcl with org.eclipse.xtext.xbase.Xbase hidden(SPACES)

import "http://www.testeditor.org/tcl"
import "http://www.testeditor.org/tsl" as tsl
import "http://www.testeditor.org/aml" as aml
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/xtext/common/JavaVMTypes"



TclModel:
	{TclModel}
	(NL? 'package' NL? package=QualifiedName)?
	(NL? importSection=TclImportSection)?
	// TODO move require to TestCase - this should not be part of a MacroCollection
	(NL? 'require' NL? environmentVariables+=EnvironmentVariable (',' NL? environmentVariables+=EnvironmentVariable)*)?
	(NL? (macroCollection=MacroCollection | 
		test=TestCase | config=TestConfiguration ))
	NL?;

TclImportSection returns xtype::XImportSection:
	importDeclarations+=TclXImportDeclaration (NL? importDeclarations+=TclXImportDeclaration)*;
			
TclXImportDeclaration returns xtype::XImportDeclaration:
	'import' (
		(static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
		| importedType=[JvmDeclaredType|QualifiedName]
		| importedNamespace=QualifiedNameWithWildcard) ';'?
;
	
TestCase:
	{TestCase}
	'#' name=ID
	(NL? 'implements' NL? specification=[tsl::TestSpecification|QualifiedName])?
	(NL? 'config' NL? config=[TestConfiguration])?
	( // allow user to define setup and cleanup either at the beginning or end
  	  // unordered groups don't compose with NL, so validation has to check
  	  // that (max) only one setup/cleanup is specfied (either before the steps, or after the steps)
		(NL (->'Setup' setup=TestSetup))?
	 	(NL (->'Cleanup' cleanup=TestCleanup))?
	 	(NL steps+=SpecificationStepImplementation)*
	 	(NL cleanup=TestCleanup)?
		(NL setup=TestSetup)?
	);
	
TestConfiguration:
	'config' name=ID
	((NL setup=TestSetup)? & (NL cleanup=TestCleanup)?);

TestSetup:
	{TestSetup}
	'Setup' ':'
	(NL contexts+=TestStepContext)*
;

TestCleanup:
	{TestCleanup}
	'Cleanup' ':'
	(NL contexts+=TestStepContext)*
;

SpecificationStepImplementation:
	{SpecificationStepImplementation}
	'*' contents+=tslInnerStepContent+
	  (NL contents+=tslStepContent contents+=tslInnerStepContent* )* 
	(NL contexts+=TestStepContext)*;

tslInnerStepContent returns tsl::StepContent:
	tslInnerStepContentText | StepContentVariable;
	
tslInnerStepContentText returns tsl::StepContentText:
	value=(Word | '*' | InnerStepContentTextOperator);

tslStepContent returns tsl::StepContent:
	tslStepContentText | StepContentVariable;

tslStepContentText returns tsl::StepContentText:
	value=(Word | StepContentTextOperator);

Word returns ecore::EString hidden():
	ID | INT | '@' | ',' | '|' | '.' | '?' | '!' | '#' | '##' | '${' | '%' | '&' | '(' | ')' | '-' | '=' |
	'+' | '`' | '~' | '\\' | ']' | '[' | '}' | '{' | ';' | ':' | '<' | '>' | '<>' | '/' | '==' | '!=' | '>=' | '<=' |
	'assert' | 'matches' | 'true' | "\\'" | '\\"' | '$' | '_' |
	 ANY_OTHER;

EnvironmentVariable:
	(nonConfidential?='public')?
	name=ID;

MacroCollection:
	'#' name=ID
	(NL? macros+=Macro)+;

Macro:
	'##' name=ID
	NL? 'template' NL? '=' NL? template=Template
	(NL contexts+=TestStepContext)*
;

Template returns aml::Template:
	contents+=TemplateText (NL? contents+=TemplateVariable (NL? contents+=TemplateText)?)*
;

TemplateText returns aml::TemplateText:
	value=STRING
;

TemplateVariable returns aml::TemplateVariable:
	name=TEMPLATE_VARIABLE_DEF
;

TestStepContext:
	(ComponentTestStepContext | MacroTestStepContext);

ComponentTestStepContext returns TestStepContext:
	{ComponentTestStepContext}
	('Mask' | 'Component') ':' component=[aml::Component|QualifiedName]
	(NL steps+=(TestStep | TestStepWithAssignment | AssertionTestStep | AssignmentThroughPath))*;

MacroTestStepContext returns TestStepContext:
	{MacroTestStepContext}
	'Macro' ':' macroCollection=[MacroCollection|QualifiedName]
	(NL steps+=TestStep)*; // currently macro calls can only be TestSteps!

/**
 * keep in mind that an aml validator exists that will check templates to be parsable given the following rule
 */
TestStep:
	{TestStep}
	'-' contents+=InnerStepContent+
		(NL contents+=StepContent contents+=InnerStepContent*)* 
	(NL? contents+=StepContentPunctuation)?;

AssertionTestStep:
	'-' 'assert' assertExpression=(NullOrBoolCheck | FullComparison) '.'?;

TestStepWithAssignment:
	'-' variable=AssignmentVariable NL? '='  
		NL? contents+=InnerStepContent+
			(NL contents+=StepContent contents+=InnerStepContent*)* 
	contents+=StepContentPunctuation?;

AssignmentThroughPath:
	'-' variableReference=VariableReferencePathAccess NL? '=' 
	    NL? expression=Expression '.'?;

/** expression order: Comparison -> (Addition -> Multiplication ->) Value
 *  which is reflecting the order of operator binding.
 *
 *  for binary expression: left is always referencing the rule with higher operator binding,
 *  right is referencing the Expression
 */
Expression:
	Comparison;

NullOrBoolCheck:
	(negated?='!')? variableReference=(VariableReference | VariableReferencePathAccess);

FullComparison returns Comparison:
	left=Value
	NL? comparator=Comparator
	NL? right=Expression;

Comparison:
	left=Value
	(NL? comparator=Comparator
	 NL? right=Expression)?;

VariableReference:
	variable=[aml::Variable];


ArrayPathElement:
	'[' number=Number ']';

KeyPathElement:
	'.' ( key=ID | key=STRING );

VariableReferencePathAccess:
	variable=[aml::Variable] ( NL? path+=KeyPathElement | NL? path+=ArrayPathElement )+;

AtomicValue returns Expression:
	VariableReference | VariableReferencePathAccess | JsonValue ;

Value returns Expression:
	AtomicValue | '(' Expression ')';

Comparator:
	ComparatorEquals |
	ComparatorMatches |
	ComparatorLessThan |
	ComparatorGreaterThan;

ComparatorEquals:
	{ComparatorEquals} ('=' | '==' | negated?='!=' | negated?='<>' | 'is' (negated?='not')?);

ComparatorMatches:
	{ComparatorMatches} ('matches' | negated?='does' 'not' 'match');

ComparatorLessThan:
	{ComparatorLessThan} ('<' | negated?='>=');

ComparatorGreaterThan:
	{ComparatorGreaterThan} ('>' | negated?='<=');

AssignmentVariable:
	name=ID;

InnerStepContent returns tsl::StepContent:
	InnerStepContentText | StepContentElement | StepContentVariable | '@' VariableReference | '@' VariableReferencePathAccess;


StepContent returns tsl::StepContent:
	StepContentText | StepContentElement | StepContentVariable | '@' VariableReference | '@' VariableReferencePathAccess;

InnerStepContentText returns tsl::StepContentText:
	value=ID | value=InnerStepContentTextOperator;


StepContentText returns tsl::StepContentText:
	value=ID | value=StepContentTextOperator;

/** hold all keywords that are allowed as step content text (to prevent parser to fail on keyword usage) */
StepContentTextOperator returns ecore::EString:
	// TODO generate this (all keywords minus assert - consider Xbase keywords as well)
	'var' | 'public' | 'template' | 'package' | 'require' | 'config' | 'implements' | 
	'does' | 'not' | 'match' | 'false' | 'null' 
	'as' |  'is' | 'for' | 'do' | 'if' | 'while';

// includes Mask Component Macro Setup and Cleanup which may start a new section (if prefixed by NL)
InnerStepContentTextOperator returns ecore::EString:
	StepContentTextOperator | 'Setup' | 'Cleanup' |
	'Mask' | 'Component' | 'Macro' ;

StepContentVariable returns tsl::StepContentVariable:
	value=STRING;

StepContentElement hidden():
	('<' value=ID '>') |
	{StepContentElement} ('<>' | '<' (SPACES | NL ) '>');

StepContentPunctuation hidden():
	value=('.'|'?')
;

JsonObject:
	{JsonObject}
	'{' NL?
		(members+=JsonMember
		(',' NL? members+=JsonMember)* 
		NL?)?
	'}';

JsonMember:
	key=STRING ':' NL? value=JsonValue;

JsonValue:
	JsonString | JsonNumber | JsonObject | JsonArray | JsonBoolean | JsonNull;

JsonString:
	value=STRING;

JsonBoolean:
	value=Boolean;

JsonNull:
	{JsonNull}
	'null';

JsonArray:
	{JsonArray}
	'[' NL?
		(values+=JsonValue 
			(',' NL? values+=JsonValue)*
		NL?)?
	']';

JsonNumber:
	value=JsonDecimal;

Boolean returns ecore::EBoolean:
	'true' | 'false';

JsonDecimal returns ecore::EString hidden():
	'-'? Number;

/*
 * Using a separate terminal is required since we'd like to write ${element} and
 * this would otherwise be matched as the keyword 'element'.
 */
terminal TEMPLATE_VARIABLE_DEF:
	'${' ID? '}';

/*
 * override ID as provided by xbase to allow for (partial) unicode ids
 */
@Override
terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_' |  'À'..'ɿ' | 'Α'..'ѯ' | 'µ') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | 'À'..'ɿ' | 'Α'..'ѯ' | 'µ')*;

terminal SPACES:
	( ' ' | '\t' )+;

terminal NL:
	(( ' ' | '\t')* ('/*' -> '*/' ( ' ' | '\t')*)* ('//' !('\r'|'\n')*)? ('\r'? '\n'))+  ( ' ' | '\t' )*;
