/*******************************************************************************
 * Copyright (c) 2012 - 2015 Signal Iduna Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Signal Iduna Corporation - initial API and implementation
 * akquinet AG
 * itemis AG
 *******************************************************************************/
 
grammar org.testeditor.aml.dsl.Aml with org.eclipse.xtext.xbase.Xbase

import "http://www.testeditor.org/aml"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

AmlModel returns AmlModel:
	'package' package=QualifiedName
	(importSection=XImportSection)?

	('generate' 'allActionGroups' fileNameAllActionGroups=STRING)?
	('generate' 'technicalBindings' fileNameTechnicalBindings=STRING)?
	
	(
		components+=Component |
		componentTypes+=ComponentType |
		componentElementTypes+=ComponentElementType |
		interactionTypes+=InteractionType |
		valueSpaces+=ValueSpace
	)*
;

Component returns Component: 
	(abstract?='abstract')? 'component' name=ID 
	('is' type=[ComponentType|QualifiedName])? 
	('includes' parents+=[Component|QualifiedName] (',' parents+=[Component|QualifiedName])*)?
	('{'
		('label' '=' label=STRING)?
		(valueSpaceAssignments+=ValueSpaceAssignment)*
		(elements+=ComponentElement)*
		// TODO support override
	'}')?
;

ComponentType returns ComponentType: 
	'component' 'type' name=ID ('{'
		('label' '=' label=STRING)?
		('interactions' '=' interactionTypes+=[InteractionType|QualifiedName] (',' interactionTypes+=[InteractionType|QualifiedName])*)?
	'}')?
;

ComponentElement returns ComponentElement:
	'element' name=ID 'is' type=[ComponentElementType|QualifiedName]
	(
		// long syntax
		('{'
			('label' '=' label=STRING)?
			('locator' '=' locator=STRING)?
			('locatorStrategy' '=' locatorStrategy=[types::JvmEnumerationLiteral|QualifiedName])?
			(valueSpaceAssignments+=ValueSpaceAssignment)*
		'}'
	) | (
		// shorter syntax
		'locate' 'by' locatorStrategy=[types::JvmEnumerationLiteral|QualifiedName] 'using'? locator=STRING
		valueSpaceAssignments+=ValueSpaceAssignment*
	))?
;

ComponentElementType returns ComponentElementType:
	'element' 'type' name=ID ('{'
		('label' '=' label=STRING)?
		('interactions' '=' interactionTypes+=[InteractionType|QualifiedName] (',' interactionTypes+=[InteractionType|QualifiedName])*)?
	'}')?
;

InteractionType returns InteractionType:
	'interaction' 'type' name=ID ('{'
		('label' '=' label=STRING)?
		('template' '=' template=Template)?
		('method' '=' defaultMethod=MethodReference)?
		('locatorStrategy' '=' locatorStrategy=[types::JvmEnumerationLiteral|QualifiedName])?
	'}')?
;

MethodReference: 
	typeReference=SimpleTypeReference '.'
	operation=[types::JvmOperation|QualifiedName]
	( '('
		(parameters+=[TemplateVariable|TemplateVariableId] (',' ( parameters+=[TemplateVariable|TemplateVariableId] | locatorStrategyParameters+='locatorStrategy'))*)?
	')' )?
;

SimpleTypeReference returns types::JvmParameterizedTypeReference:
  type=[types::JvmType|ValidID]
;

ValueSpace returns ValueSpace:
	'value-space' (StringLiterals | IntegerRange | RegExValueSpace)
;

StringLiterals returns StringLiterals:
	name=ID '=' '#['
		values+=STRING (',' values+=STRING)*
	']'
;

IntegerRange returns IntegerRange:
	name=ID '=' from=INT '..' to=INT
;

RegExValueSpace:
	name=ID '=' expression=STRING
;

Template:
	contents+=TemplateText (contents+=TemplateVariable contents+=TemplateText?)* 
;

TemplateText: 
	value=STRING
;

TemplateVariable: 
	name=TEMPLATE_VARIABLE_DEF
;

// TODO clean this up with TEMPLATE_VARIABLE_DEF
TemplateVariableId:
	'element' | ID
;

/* 
 * Using a separate terminal is required since we'd like to write ${element} and
 * this would otherwise be matched as the keyword 'element'.
 */
terminal TEMPLATE_VARIABLE_DEF:
	'${' ID? '}'
;

ValueSpaceAssignment: 
	variable=[TemplateVariable|QualifiedName] 'restrict' 'to' valueSpace=[ValueSpace|QualifiedName]
;