grammar org.testeditor.aml.dsl.Aml with org.eclipse.xtext.xbase.Xbase

import "org.testeditor.aml.model"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype

AmlModel returns AmlModel:
	'package' package=QualifiedName
//	('importSection' importSection=XImportSection)? // TODO support imports

	('generate' 'allActionGroups' fileNameAllActionGroups=STRING)?
	('generate' 'technicalBindings' fileNameTechnicalBindings=STRING)?
	
	(
		components+=Component |
		componentTypes+=ComponentType |
		componentElementTypes+=ComponentElementType |
		interactionTypes+=InteractionType |
		valueSpaces+=ValueSpace
	)*
;

Component returns Component: 
	(abstract?='abstract')? 'component' name=ID 
	('is' type=[ComponentType])? 
	('includes' parents+=[Component] (',' parents+=[Component])*)?
	('{'
		('label' '=' label=STRING)?
		elements+=ComponentElement*
		// TODO support override
	'}')?
;

ComponentType returns ComponentType: 
	'component' 'type' name=ID ('{'
		('label' '=' label=STRING)?
	'}')?
;

ComponentElement returns ComponentElement:
	'element' name=ID 'is' type=[ComponentElementType] ('{'
		('label' '=' label=STRING)?
		('locator' '=' locator=STRING)?
		(valueSpaceAssignments+=ValueSpaceAssignment)*
	'}')?
;

ComponentElementType returns ComponentElementType:
	'element' 'type' name=ID ('{'
		('label' '=' label=STRING)?
		('interactions' '=' interactionTypes+=[InteractionType] (',' interactionTypes+=[InteractionType])*)?
	'}')?
;

InteractionType returns InteractionType:
	'interaction' 'type' name=ID ('{'
		('label' '=' label=STRING)?
		('template' '=' template=Template)? // TODO use proper data type
		// TODO support fixture-method reference
	'}')?
;

ValueSpace returns ValueSpace:
	'value-space' (StringLiterals | IntegerRange)
;

StringLiterals returns StringLiterals:
	name=ID '=' '#['
		values+=STRING (',' values+=STRING)*
	']'
;

IntegerRange returns IntegerRange:
	name=ID '=' from=INT '..' to=INT
;

// TODO support RegEx value space

Template:
	contents+=TemplateText (contents+=TemplateVariable contents+=TemplateText?)* 
;

TemplateText: 
	value=STRING
;

TemplateVariable: 
	name=TEMPLATE_VARIABLE_DEF
;

/* 
 * Using a separate terminal is required since we'd like to write ${element} and
 * this would otherwise be matched as the keyword 'element'.
 */
terminal TEMPLATE_VARIABLE_DEF:
	'${' ID? '}'
;

ValueSpaceAssignment: 
	variable=[TemplateVariable|QualifiedName] 'restrict' 'to' valueSpace=[ValueSpace]
;